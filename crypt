#!/usr/bin/env python

# The MIT License (MIT)

# Copyright (c) 2015 Gabe Mulley

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


from __future__ import print_function

import argparse
import errno
import os
import random
import re
import shutil
import stat
import string
import subprocess
import sys
import tempfile

try:
    from subprocess import DEVNULL
except ImportError:
    import os
    DEVNULL = open(os.devnull, 'wb')

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


CRYPT_BASE_PATH = os.path.abspath(
    os.path.expanduser(
        os.getenv('CRYPT_BASE_PATH', '~/.crypt')
    )
)
CRYPT_REPO_PATH = os.path.join(CRYPT_BASE_PATH, 'repo')
CRYPT_CONFIG_PATH = os.path.join(CRYPT_BASE_PATH, 'crypt.cfg')
CRYPT_MARKER_PATH = os.path.join(CRYPT_BASE_PATH, 'marker')
CRYPT_GPG_ARGS = ['gpg', '--no-verbose', '--quiet', '--batch']
EDITOR = os.environ.get('EDITOR', 'nano')

viewers = []


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands')

    init_parser = subparsers.add_parser('init', help='Setup your crypt')
    init_parser.set_defaults(func=init)

    add_parser = subparsers.add_parser('add', help='Add a file to the crypt')
    add_parser.add_argument('crypt_path', help='The path within the crypt to store the file at')
    add_parser.add_argument('path', help='The file to add, specifying "-" will read the input from stdin')
    add_parser.set_defaults(func=add)

    cat_parser = subparsers.add_parser('cat', help='Decrypt a file in the crypt and write unencrypted contents to stdout')
    cat_parser.add_argument('crypt_path', help='The file to read')
    cat_parser.set_defaults(func=cat)

    clip_parser = subparsers.add_parser('clip', help='Decrypt a file in the crypt and write unencrypted contents to the clipboard')
    clip_parser.add_argument('crypt_path', help='The file to read')
    clip_parser.set_defaults(func=clip)

    list_parser = subparsers.add_parser('ls', help='List files stored in the crypt')
    list_parser.set_defaults(func=ls)

    rm_parser = subparsers.add_parser('rm', help='Remove a file from the crypt')
    rm_parser.add_argument('--force', '-f', action='store_true', help="Don't prompt to confirm if the file should be removed")
    rm_parser.add_argument('crypt_path', help='The file to remove')
    rm_parser.set_defaults(func=rm)

    mv_parser = subparsers.add_parser('mv', help='Rename or move a file in the crypt')
    mv_parser.add_argument('from_crypt_path', help='The file to move')
    mv_parser.add_argument('to_crypt_path', help='The new location to store the file in the crypt')
    mv_parser.set_defaults(func=mv)

    exec_parser = subparsers.add_parser('exec', help='Run a process with decrypted files')
    exec_parser.add_argument('--link', action='append', default=list(), metavar='crypt_path:filesystem_path', help='Decrypt the file stored at <crypt_path> and store the result at <filesystem_path> while executing the subprocess')
    exec_parser.add_argument('--env', action='append', default=list(), metavar='crypt_path', help='Parse environment variables out of the file stored at <crypt_path>')
    exec_parser.add_argument('cmd', nargs=argparse.REMAINDER, help='Command to execute')
    exec_parser.set_defaults(func=execute)

    pwgen_parser = subparsers.add_parser('pwgen', help='Generate a password and store it in the crypt')
    pwgen_parser.add_argument('--output', metavar='crypt_path', help='The path within the crypt to store the password at. Defaults to stdout.')
    pwgen_parser.add_argument('--chars', action='append', choices=['alphanum', 'punc', 'space'], help='Allowed characters in the password')
    pwgen_parser.add_argument('--length', type=int, default=32, help='The number of characters to include in the generated password')
    pwgen_parser.set_defaults(func=pwgen)

    edit_parser = subparsers.add_parser('edit', help='Modify a file in the crypt')
    edit_parser.add_argument('crypt_path', help='The file to modify')
    edit_parser.set_defaults(func=edit)

    args = parser.parse_args()
    if not hasattr(args, 'func'):
        parser.print_help()
    else:
        if args.func != init:
            check_user_authorization()
        args.func(args)


def check_user_authorization():
    try:
        gpg('--decrypt', CRYPT_MARKER_PATH)
    except subprocess.CalledProcessError:
        sys.stderr.write('This user is not authorized to access the crypt\n')
        sys.exit(2)


def init(args):
    ensure_initialized()


def add(args):
    ensure_initialized()
    encrypted_file_path = get_encrypted_file_path(args.crypt_path)
    ensure_directory_exists(os.path.dirname(encrypted_file_path))

    gpg_args = ['--encrypt', '--output', encrypted_file_path]
    for viewer in viewers:
        gpg_args.extend(['--recipient', viewer])
    gpg_kwargs = {}
    if args.path == '-':
        gpg_kwargs['stdin'] = sys.stdin
    else:
        input_file_path = os.path.abspath(args.path)
        gpg_args.append(input_file_path)

    try:
        gpg(*gpg_args, **gpg_kwargs)
    except subprocess.CalledProcessError:
        sys.exit(1)

    os.chmod(encrypted_file_path, stat.S_IWUSR | stat.S_IRUSR)


def get_encrypted_file_path(crypt_path):
    return os.path.join(CRYPT_REPO_PATH, crypt_path) + '.gpg'


def ensure_directory_exists(path_to_dir):
    try:
        os.makedirs(path_to_dir, stat.S_IRWXU)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def ensure_file_is_removed(path_to_file):
    if path_to_file is None:
        return

    try:
        os.unlink(path_to_file)
    except OSError as exception:
        if exception.errno != errno.ENOENT:
            raise


def ensure_initialized():
    if os.path.exists(CRYPT_REPO_PATH):
        if not os.path.isdir(CRYPT_REPO_PATH):
            raise RuntimeError('Expected {0} to be a directory.'.format(CRYPT_REPO_PATH))
    else:
        ensure_directory_exists(CRYPT_REPO_PATH)

    config = configparser.SafeConfigParser()
    config.read(CRYPT_CONFIG_PATH)
    try:
        csv_viewers = config.get('crypt', 'viewers')
    except configparser.Error:
        sys.stderr.write('You have not configured this crypt, setting it up now.\n')
        csv_viewers = ''
        while csv_viewers.strip() == '':
            csv_viewers = raw_input('Enter a comma separated list of keys that will be allowed to view files in this crypt: ')

        try:
            config.add_section('crypt')
        except configparser.DuplicateSectionError:
            pass

        config.set('crypt', 'viewers', csv_viewers)

        with open(CRYPT_CONFIG_PATH, 'w') as config_file:
            config.write(config_file)

        os.chmod(CRYPT_CONFIG_PATH, stat.S_IWUSR | stat.S_IRUSR)

    viewers.extend(x.strip() for x in csv_viewers.split(','))

    if not os.path.exists(CRYPT_MARKER_PATH):
        with tempfile.NamedTemporaryFile() as tmp_file:
            tmp_file.write('This user has permission to decrypt this file.')
            tmp_file.seek(0)

            gpg_args = ['--encrypt', '--output', CRYPT_MARKER_PATH]
            for viewer in viewers:
                gpg_args.extend(['--recipient', viewer])
            gpg_args.append(os.path.abspath(tmp_file.name))

            try:
                gpg(*gpg_args)
            except subprocess.CalledProcessError:
                sys.exit(1)

        os.chmod(CRYPT_MARKER_PATH, stat.S_IWUSR | stat.S_IRUSR)


def call(*args, **kwargs):
    kwargs.setdefault('cwd', CRYPT_REPO_PATH)
    kwargs.setdefault('stdout', DEVNULL)
    return subprocess.check_call(*args, **kwargs)


def gpg(*args, **kwargs):
    return call(CRYPT_GPG_ARGS + list(args), **kwargs)


def cat(args):
    try:
        gpg('--decrypt', get_encrypted_file_path(args.crypt_path), stdout=sys.stdout)
    except subprocess.CalledProcessError:
        sys.exit(1)


def clip(args):
    gpg_proc = subprocess.Popen(
        CRYPT_GPG_ARGS + ['--decrypt', get_encrypted_file_path(args.crypt_path)],
        stdout=subprocess.PIPE
    )
    clip_proc = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=gpg_proc.stdout, stdout=DEVNULL)
    gpg_proc.stdout.close()
    clip_retcode = clip_proc.wait()
    gpg_retcode = gpg_proc.wait()

    if clip_retcode > 0 or gpg_retcode > 0:
        sys.exit(1)


def ls(args):
    for root, dirs, files in os.walk(CRYPT_REPO_PATH, topdown=False):
        for name in files:
            if name.endswith('.gpg'):
                print(os.path.relpath(os.path.join(root, name[:-4]), CRYPT_REPO_PATH))


def rm(args):
    encrypted_file_path = get_encrypted_file_path(args.crypt_path)
    if not os.path.exists(encrypted_file_path):
        sys.stderr.write('Path {0} does not exist.\n'.format(args.crypt_path))
        sys.exit(0)

    if args.force:
        answer = 'y'
    else:
        answer = raw_input("This operation cannot be undone, continue [y/N]? ")

    if answer.lower() == 'y':
        os.unlink(encrypted_file_path)
    else:
        sys.exit(1)


def mv(args):
    from_encrypted_file_path = get_encrypted_file_path(args.from_crypt_path)
    if not os.path.exists(from_encrypted_file_path):
        sys.stderr.write('Path {0} does not exist.\n'.format(args.from_crypt_path))
        sys.exit(1)

    to_encrypted_file_path = get_encrypted_file_path(args.to_crypt_path)
    ensure_directory_exists(os.path.dirname(to_encrypted_file_path))
    shutil.move(from_encrypted_file_path, to_encrypted_file_path)


PASSWORD_CHAR_CATEGORIES = {
    'alphanum': string.letters + string.digits,
    'punc': string.punctuation,
    'space': [' ']
}


def pwgen(args):
    if args.chars:
        chars = []
        for category in args.chars:
            chars.extend(PASSWORD_CHAR_CATEGORIES[category])
    else:
        chars = PASSWORD_CHAR_CATEGORIES['alphanum'] + PASSWORD_CHAR_CATEGORIES['punc']

    content = ''.join(random.choice(chars) for x in range(args.length))
    if hasattr(args, 'output') and args.output:
        with tempfile.NamedTemporaryFile() as tmp_file:
            tmp_file.write(content)
            tmp_file.seek(0)
            add(argparse.Namespace(crypt_path=args.output, path=tmp_file.name))
        sys.stderr.write('Saved password to {0}: {1}\n'.format(args.output, content))
    else:
        sys.stdout.write(content)


def execute(args):
    exit_code = 0

    env = dict(os.environ)
    for env_var_crypt_path in args.env:
        gpg_proc = subprocess.Popen(
            CRYPT_GPG_ARGS + ['--decrypt', get_encrypted_file_path(env_var_crypt_path)],
            stdout=subprocess.PIPE
        )
        for line in gpg_proc.stdout:
            m = re.match(r'(?:export )?(?P<key>[^=]+)=(?P<value>.*)', line)
            if not m:
                continue
            env[m.group('key')] = m.group('value')

        exit_code = gpg_proc.wait()
        if exit_code != 0:
            sys.exit(exit_code)

    linked_files = []
    try:
        for link in args.link:
            crypt_path, path = link.split(':')
            linked_files.append(path)
            try:
                gpg('--decrypt', '--output', path, get_encrypted_file_path(crypt_path))
            except subprocess.CalledProcessError:
                sys.exit(1)

            os.chmod(path, stat.S_IRUSR)

        exit_code = subprocess.call(args.cmd, env=env)
    except KeyboardInterrupt:
        exit_code = 1
    finally:
        for linked_file_path in linked_files:
            ensure_file_is_removed(linked_file_path)

    sys.exit(exit_code)


def edit(args):
    encrypted_file_path = get_encrypted_file_path(args.crypt_path)
    backup_file_path = encrypted_file_path + '.bak'
    with tempfile.NamedTemporaryFile() as tmp_file:
        should_backup = False
        if os.path.exists(encrypted_file_path):
            should_backup = True
            gpg('--decrypt', encrypted_file_path, stdout=tmp_file)
        subprocess.check_call([EDITOR, tmp_file.name])

        if should_backup:
            os.rename(encrypted_file_path, backup_file_path)

        try:
            add(argparse.Namespace(crypt_path=args.crypt_path, path=tmp_file.name))
        except:
            if should_backup:
                os.rename(backup_file_path, encrypted_file_path)
        else:
            if should_backup:
                os.unlink(backup_file_path)

if __name__ == "__main__":
    main()
