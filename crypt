#!/usr/bin/env python

from __future__ import print_function

import argparse
import errno
import os
import random
import string
import subprocess
import sys
import tempfile

try:
    from subprocess import DEVNULL
except ImportError:
    import os
    DEVNULL = open(os.devnull, 'wb')

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


CRYPT_BASE_PATH = os.path.abspath(
    os.path.expanduser(
        os.getenv('CRYPT_BASE_PATH', '~/.crypt')
    )
)
CRYPT_REPO_PATH = os.path.join(CRYPT_BASE_PATH, 'repo')
CRYPT_CONFIG_PATH = os.path.join(CRYPT_BASE_PATH, 'crypt.cfg')

viewers = []


def init(args):
    ensure_initialized()


def add(args):
    ensure_initialized()
    encrypted_file_path = get_encrypted_file_path(args.crypt_path)
    ensure_directory_exists(os.path.dirname(encrypted_file_path))

    gpg_args = ['--encrypt', '--output', encrypted_file_path]
    for viewer in viewers:
        gpg_args.extend(['--recipient', viewer])
    gpg_kwargs = {}
    if args.path == '-':
        gpg_kwargs['stdin'] = sys.stdin
    else:
        input_file_path = os.path.abspath(args.path)
        gpg_args.append(input_file_path)

    try:
        gpg(*gpg_args, **gpg_kwargs)
    except subprocess.CalledProcessError:
        sys.exit(1)
    sys.stderr.write('Wrote {0}.\n'.format(args.crypt_path))


def get_encrypted_file_path(crypt_path):
    return os.path.join(CRYPT_REPO_PATH, crypt_path) + '.gpg'


def ensure_directory_exists(path_to_dir):
    try:
        os.makedirs(path_to_dir)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def ensure_file_is_removed(path_to_file):
    if path_to_file is None:
        return

    try:
        os.unlink(path_to_file)
    except OSError as exception:
        if exception.errno != errno.ENOENT:
            raise


def ensure_initialized():
    if os.path.exists(CRYPT_REPO_PATH):
        if not os.path.isdir(CRYPT_REPO_PATH):
            raise RuntimeError('Expected {0} to be a directory.'.format(CRYPT_REPO_PATH))
    else:
        ensure_directory_exists(CRYPT_REPO_PATH)

    readme_path = os.path.join(CRYPT_REPO_PATH, 'README')
    if not os.path.exists(readme_path):
        with open(readme_path, 'w') as readme:
            readme.write('This is a secure repository containing encrypted files managed by crypt.')


    config = configparser.SafeConfigParser()
    config.read(CRYPT_CONFIG_PATH)
    try:
        csv_viewers = config.get('crypt', 'viewers')
    except configparser.Error:
        sys.stderr.write('You have not configured this crypt, setting it up now.\n')
        csv_viewers = ''
        while csv_viewers.strip() == '':
            csv_viewers = raw_input('Enter a comma separated list of keys that will be allowed to view files in this crypt: ')

        try:
            config.add_section('crypt')
        except configparser.DuplicateSectionError:
            pass

        config.set('crypt', 'viewers', csv_viewers)

        with open(CRYPT_CONFIG_PATH, 'w') as config_file:
            config.write(config_file)

    viewers.extend(x.strip() for x in csv_viewers.split(','))


def call(*args, **kwargs):
    kwargs.setdefault('cwd', CRYPT_REPO_PATH)
    kwargs.setdefault('stdout', DEVNULL)
    return subprocess.check_call(*args, **kwargs)


def gpg(*args, **kwargs):
    return call(['gpg', '--no-verbose', '--quiet', '--batch'] + list(args), **kwargs)


def cat(args):
    try:
        gpg('--decrypt', get_encrypted_file_path(args.crypt_path), stdout=sys.stdout)
    except subprocess.CalledProcessError:
        sys.exit(1)


def ls(args):
    for root, dirs, files in os.walk(CRYPT_REPO_PATH, topdown=False):
        for name in files:
            if name.endswith('.gpg'):
                print(os.path.relpath(os.path.join(root, name[:-4]), CRYPT_REPO_PATH))


def rm(args):
    encrypted_file_path = get_encrypted_file_path(args.crypt_path)
    if not os.path.exists(encrypted_file_path):
        sys.stderr.write('Path {0} does not exist.\n'.format(args.crypt_path))
        sys.exit(0)

    try:
        gpg('--decrypt', encrypted_file_path)
    except subprocess.CalledProcessError:
        sys.stderr.write('Removal failed. You must be able to decrypt {0} to remove it.\n'.format(args.crypt_path))
        sys.exit(1)

    answer = raw_input("This operation cannot be undone, continue [y/N]? ")
    if answer.lower() == 'y':
        os.unlink(encrypted_file_path)
        sys.stderr.write('Removed {0}.\n'.format(args.crypt_path))
    else:
        sys.stderr.write('Aborting.\n')
        sys.exit(1)


def pwgen(args):
    chars = string.letters + string.digits + string.punctuation
    content = ''.join(random.choice(chars) for x in range(args.length))
    sys.stdout.write('Generated password: {0}\n'.format(content))
    with tempfile.NamedTemporaryFile() as tmp_file:
        tmp_file.write(content)
        tmp_file.seek(0)
        add(argparse.Namespace(crypt_path=args.crypt_path, path=tmp_file.name))


def execute(args, extra_args=None):
    linked_files = []
    try:
        for link in args.link:
            crypt_path, path = link.split(':')
            linked_files.append(path)
            try:
                gpg('--decrypt', '--output', path, get_encrypted_file_path(crypt_path))
            except subprocess.CalledProcessError:
                sys.exit(1)

        exit_code = subprocess.call(args.cmd)
    finally:
        for linked_file_path in linked_files:
            ensure_file_is_removed(linked_file_path)

    sys.exit(exit_code)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands')

    init_parser = subparsers.add_parser('init', help='Setup your crypt')
    init_parser.set_defaults(func=init)

    add_parser = subparsers.add_parser('add', help='Add a file to the secure repo')
    add_parser.add_argument('crypt_path', help='The path within the secure repo to store the file at')
    add_parser.add_argument('path', help='The file to add, specifying "-" will read the input from stdin')
    add_parser.set_defaults(func=add)

    cat_parser = subparsers.add_parser('cat', help='Read a file in the secure repo and write its contents to stdout')
    cat_parser.add_argument('crypt_path', help='The file to read')
    cat_parser.set_defaults(func=cat)

    list_parser = subparsers.add_parser('ls', help='List files stored in the secure repo')
    list_parser.set_defaults(func=ls)

    rm_parser = subparsers.add_parser('rm', help='Remove a file from the secure repo')
    rm_parser.add_argument('crypt_path', help='The file to remove')
    rm_parser.set_defaults(func=rm)

    pwgen_parser = subparsers.add_parser('pwgen', help='Generate a password and store it in the secure repo')
    pwgen_parser.add_argument('crypt_path', help='The path within the secure repo to store the password at')
    pwgen_parser.add_argument('--length', type=int, default=32, help='The number of characters to include in the generated password')
    pwgen_parser.set_defaults(func=pwgen)

    exec_parser = subparsers.add_parser('exec', help='Run a process with decrypted files')
    exec_parser.add_argument('--link', action='append', help='<crypt_path>:<filesystem_path>')
    exec_parser.add_argument('cmd', nargs=argparse.REMAINDER, help='Command to execute')
    exec_parser.set_defaults(func=execute)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
